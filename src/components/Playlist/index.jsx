import React, { useState, useContext } from 'react';
import axios from 'axios';
import { useSession } from 'next-auth/react';
import SpotifyWebApi from 'spotify-web-api-node';
import { AiOutlineCopy } from 'react-icons/ai';
import { ListContext, ListContextProvider } from '../../../context';
import styles from './home.module.scss';

function Playlist() {
  const { filteredAlbuns, trackUri } = useContext(ListContext);
  // console.log('playlists', filteredAlbuns);

  const spotifyApi = new SpotifyWebApi();
  const { data: session, status } = useSession();
  const loading = status === 'loading';
  const [playlistTitle, setPlaylistTitle] = useState('');

  const [toggleList, setToggleList] = useState(false);

  const [getPlaylistTracks, setGetPlaylistTracks] = useState();

  const [playlistLink, setPlaylistLink] = useState('');

  console.log('Playlists: trackUri', trackUri);

  async function onSubmit(e) {
    e.preventDefault();
    spotifyApi.setAccessToken(session.accessToken);

    spotifyApi.createPlaylist(playlistTitle, { description: 'Generated by Discogs to Spotify', public: true })
      .then((data) => {
        console.log('Created playlist!');
      }, (err) => {
        console.log('Something went wrong!', err);
      }).then((data) => {
        spotifyApi.getUserPlaylists(session.userName)
          .then((userData) => {
            console.log('Retrieved playlists', userData.body);
            const userPlaylists = userData.body.items;
            console.log('PLAYLIST ID', userPlaylists);
            return userPlaylists;
          }, (err) => {
            console.log('Something went wrong!', err);
          }).then((userPlaylists) => {
            Object.keys(userPlaylists).map((playlistId) => {
              if (playlistTitle === userPlaylists[playlistId].name && userPlaylists[playlistId].description === 'Generated by Discogs to Spotify') {
                const userPlaylistId = userPlaylists[playlistId].id;
                console.log('IDSSS', userPlaylistId);

                spotifyApi.addTracksToPlaylist(userPlaylistId, trackUri)
                  .then((data) => {
                    console.log('Added tracks to playlist!');
                    console.log('userPlaylists', userPlaylists);
                  }, (err) => {
                    console.log('Something went wrong!', err);
                  }).then((newPlaylist) => {
                    spotifyApi.getPlaylist(userPlaylistId)
                      .then((newUserPlaylist) => {
                        console.log('Some information about this playlist', newUserPlaylist.body);
                        const playlistName = newUserPlaylist.body.name;
                        console.log('PLAYLIST NAME', playlistName);
                        const playlistLink = newUserPlaylist.body.href;
                        setPlaylistLink(playlistLink);
                        console.log('PLAYLIST link', playlistLink);
                        const playListImg = newUserPlaylist.body.images;
                        console.log('PLAYLIST image', playListImg);
                        const playListTracks = newUserPlaylist.body.tracks.items;
                        setGetPlaylistTracks(playListTracks);
                        console.log('PLAYLIST tracks', playListTracks);

                        return playListTracks;
                      }, (err) => {
                        console.log('Something went wrong!', err);
                      }).then((toggleList) => {
                        setToggleList(true);
                      }, (err) => {
                        console.log(err);
                      });
                  });
              }
            });
          }, (err) => {
            console.log('uri error', err);
          });
      });
  }

  return !toggleList ? (
    <div className={styles.container}>
      <h1>
        Create a new
        {' '}
        <span>Spotify</span>
        {' '}
        playlist

      </h1>
      <form>
        <label className={styles.label}>Give your playlist a name: </label>
        <input
          id="text"
          type="text"
          onChange={(e) => setPlaylistTitle(e.target.value)}
          value={playlistTitle}
          placeholder="Playlist title"
          autoComplete="off"
        />
        <button className={styles.generatebutton} type="button" onClick={onSubmit}>Create new playlist</button>

      </form>
    </div>
  ) : (
    <div className={styles.Content}>
      <div className={styles.newPlaylistHeader}>
        <h1>
          Your new playlist has been created!
        </h1>
        <div className={styles.clipboard}>
          <p>{playlistLink}</p>
          <AiOutlineCopy onClick={() => setUrl('https://www.discogs.com/lists/Eletr%C3%B4nica/941179')} />
        </div>
      </div>
      {Object.keys(getPlaylistTracks).map((getPlaylistTrack) => {
        const tracks = getPlaylistTracks[getPlaylistTrack].track.album.artists;
        console.log('TRACKS.album', tracks);
        const trackName = getPlaylistTracks[getPlaylistTrack].track.name;
        let artistName;
        console.log('track NAME', trackName);
        Object.keys(tracks).map((trackInfo) => {
          artistName = tracks[trackInfo];
          console.log('ARTIST NAME', artistName.name);
          return artistName.name;
        });
        return (
          <div className={styles.playlist}>
            <ol className={styles.list}>
              <li>
                <div>
                  <p className={styles.trackName}>
                    {trackName}
                  </p>
                </div>
                <div>

                  <p className={styles.artistName}>
                    {artistName.name}

                  </p>
                </div>
              </li>
            </ol>

          </div>
        );
      })}
    </div>
  );
}

export default Playlist;
